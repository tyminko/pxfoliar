
name: studio-nuxt-build
run-name: studio nuxt build

on:
  # Manual runs only. Cloudflare Pages will handle builds on push.
  workflow_dispatch:

# Add write workflow permissions
permissions:
  contents: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build-and-deploy:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: .

    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [20]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Identify package manager
        id: pkgman
        run: |
          cache=`[ -f "./pnpm-lock.yaml" ] && echo "pnpm" || ([ -f "./package-lock.json" ] && echo "npm" || ([ -f "./yarn.lock" ] && echo "yarn" || echo ""))`
          package_manager=`[ ! -z "$cache" ] && echo "$cache" || echo "npm"`
          echo "cache=$cache" >> $GITHUB_OUTPUT
          echo "package_manager=$package_manager" >> $GITHUB_OUTPUT

      - uses: pnpm/action-setup@v4
        if: ${{ steps.pkgman.outputs.package_manager == 'pnpm' }}
        name: Install pnpm
        id: pnpm-install

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ steps.pkgman.outputs.cache }}

      - name: Install dependencies
        run: ${{ steps.pkgman.outputs.package_manager }} install

      - name: Generate
        run: |
          echo "Starting build process..."
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Package manager: ${{ steps.pkgman.outputs.package_manager }}"

          # Run build with verbose output
          ${{ steps.pkgman.outputs.package_manager }} run build --verbose || echo "Build command failed"

          echo "Build completed. Checking for output..."
          echo "Current directory contents:"
          ls -la || echo "No files in current directory"

          echo "Checking for .output directory:"
          if [ -d ".output" ]; then
            echo ".output directory exists"
            ls -la .output/
          else
            echo ".output directory does not exist"
          fi

          echo "Checking for dist directory:"
          if [ -d "dist" ]; then
            echo "dist directory exists"
            ls -la dist/
          else
            echo "dist directory does not exist"
          fi
        env:
          NITRO_PRESET: github_pages

      - name: Debug - List output directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing .output directory:"
          ls -la .output/ || echo ".output directory not found"
          echo "Listing .output/public directory:"
          ls -la .output/public/ || echo ".output/public directory not found"

      # Deployment job
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ./.output/public
